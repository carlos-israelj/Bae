/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace BaeSensorRegistry {
  export type SensorDataStruct = {
    deviceId: string;
    ciphertext: BytesLike;
    nonce: BytesLike;
    signature: BytesLike;
    timestamp: BigNumberish;
    blockNumber: BigNumberish;
  };

  export type SensorDataStructOutput = [
    deviceId: string,
    ciphertext: string,
    nonce: string,
    signature: string,
    timestamp: bigint,
    blockNumber: bigint
  ] & {
    deviceId: string;
    ciphertext: string;
    nonce: string;
    signature: string;
    timestamp: bigint;
    blockNumber: bigint;
  };
}

export interface BaeSensorRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allReadings"
      | "getLatestReading"
      | "getReading"
      | "getReadingCount"
      | "submitSensorData"
      | "totalReadings"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "SensorDataSubmitted"): EventFragment;

  encodeFunctionData(
    functionFragment: "allReadings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestReading",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReading",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReadingCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitSensorData",
    values: [string, BytesLike, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalReadings",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "allReadings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestReading",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReading", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getReadingCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitSensorData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalReadings",
    data: BytesLike
  ): Result;
}

export namespace SensorDataSubmittedEvent {
  export type InputTuple = [
    deviceId: string,
    timestamp: BigNumberish,
    blockNumber: BigNumberish,
    index: BigNumberish
  ];
  export type OutputTuple = [
    deviceId: string,
    timestamp: bigint,
    blockNumber: bigint,
    index: bigint
  ];
  export interface OutputObject {
    deviceId: string;
    timestamp: bigint;
    blockNumber: bigint;
    index: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BaeSensorRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): BaeSensorRegistry;
  waitForDeployment(): Promise<this>;

  interface: BaeSensorRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allReadings: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, string, bigint, bigint] & {
        deviceId: string;
        ciphertext: string;
        nonce: string;
        signature: string;
        timestamp: bigint;
        blockNumber: bigint;
      }
    ],
    "view"
  >;

  getLatestReading: TypedContractMethod<
    [],
    [BaeSensorRegistry.SensorDataStructOutput],
    "view"
  >;

  getReading: TypedContractMethod<
    [index: BigNumberish],
    [BaeSensorRegistry.SensorDataStructOutput],
    "view"
  >;

  getReadingCount: TypedContractMethod<[], [bigint], "view">;

  submitSensorData: TypedContractMethod<
    [
      deviceId: string,
      ciphertext: BytesLike,
      nonce: BytesLike,
      signature: BytesLike,
      timestamp: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  totalReadings: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allReadings"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, string, bigint, bigint] & {
        deviceId: string;
        ciphertext: string;
        nonce: string;
        signature: string;
        timestamp: bigint;
        blockNumber: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLatestReading"
  ): TypedContractMethod<
    [],
    [BaeSensorRegistry.SensorDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getReading"
  ): TypedContractMethod<
    [index: BigNumberish],
    [BaeSensorRegistry.SensorDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getReadingCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "submitSensorData"
  ): TypedContractMethod<
    [
      deviceId: string,
      ciphertext: BytesLike,
      nonce: BytesLike,
      signature: BytesLike,
      timestamp: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalReadings"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "SensorDataSubmitted"
  ): TypedContractEvent<
    SensorDataSubmittedEvent.InputTuple,
    SensorDataSubmittedEvent.OutputTuple,
    SensorDataSubmittedEvent.OutputObject
  >;

  filters: {
    "SensorDataSubmitted(string,uint256,uint256,uint256)": TypedContractEvent<
      SensorDataSubmittedEvent.InputTuple,
      SensorDataSubmittedEvent.OutputTuple,
      SensorDataSubmittedEvent.OutputObject
    >;
    SensorDataSubmitted: TypedContractEvent<
      SensorDataSubmittedEvent.InputTuple,
      SensorDataSubmittedEvent.OutputTuple,
      SensorDataSubmittedEvent.OutputObject
    >;
  };
}
